plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.+'
    id 'io.spring.dependency-management' version '1.1.+'
    id "com.github.ben-manes.versions" version "0.51.+"
}

description = 'Spring Boot with mutual TLS'
group = 'ch.frostnova'
version = '1.0.0-SNAPSHOT'

ext {
    springVersion = '3.3.+'
    checkVersion = '1.0.+'

    junitVersion = '5.11.+'
    junitPlatformVersion = '1.11.+'
    assertjVersion = '3.26.+'
    mockitoVersion = '5.14.+'

    libs = [
            check         : [
                    "ch.frostnova:check:${checkVersion}"
            ],
            testBase      : [
                    "org.junit.jupiter:junit-jupiter:$junitVersion",
                    "org.assertj:assertj-core:$assertjVersion",
                    "org.mockito:mockito-core:$mockitoVersion"
            ],
            testRuntime   : [
                    "org.junit.platform:junit-platform-launcher:$junitPlatformVersion"
            ],
            springBoot    : [
                    "org.springframework.boot:spring-boot-starter-web",
                    "org.springframework.boot:spring-boot-starter-security",
                    "org.springframework.boot:spring-boot-starter-actuator"
            ],
            springBootTest: [
                    "org.springframework.boot:spring-boot-starter-test",
                    "org.springframework.boot:spring-boot-starter-jersey"
            ]
    ]
}

dependencies {
    implementation libs.check
    implementation libs.springBoot

    testImplementation libs.testBase
    testImplementation libs.springBootTest

    testRuntimeOnly libs.testRuntime
}
defaultTasks 'clean', 'build'

repositories {
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "failed"
    }
}


def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}

task start(dependsOn: ['assemble', 'bootRun']) {
    group = 'Start/Run'
    description = 'Start the boot app'
}
