plugins {
    id 'com.github.ben-manes.versions' version '0.33.0'
    id 'org.springframework.boot' version '2.4.0'
}

apply plugin: 'java-library'

description = 'Spring Boot with mutual TLS'
group = 'ch.frostnova'
version = '1.0.0-SNAPSHOT'

defaultTasks 'clean', 'build'

repositories {
    jcenter()
    mavenLocal()
    mavenCentral()
}

java {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
}

jar { duplicatesStrategy = 'exclude' }

compileJava.options.encoding = 'UTF-8'
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

dependencyUpdates {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}
ext {
    checkVersion = '1.0.0'
    junitVersion = '4.13.1'
    mockitoVersion = '3.5.15'
    springVersion = '2.4.0'

    libs = [
            check         : [
                    "ch.frostnova:check:${checkVersion}"
            ],
            testbase      : [
                    "junit:junit:${junitVersion}",
                    "org.mockito:mockito-core:${mockitoVersion}"
            ],
            springBoot    : [
                    "org.springframework.boot:spring-boot-starter-web:${springVersion}",
                    "org.springframework.boot:spring-boot-starter-security:${springVersion}",
                    "org.springframework.boot:spring-boot-starter-actuator:${springVersion}"
            ],
            springBootTest: [
                    "org.springframework.boot:spring-boot-starter-test:${springVersion}",
                    "org.springframework.boot:spring-boot-starter-jersey:${springVersion}",
                    "javax.xml.bind:jaxb-api:2.3.1"
            ]
    ]
}

dependencies {
    compile libs.check
    compile libs.springBoot
    testCompile libs.testbase
    testCompile libs.springBootTest
}

task start(dependsOn: ['assemble', 'bootRun']) {
    group = 'Start/Run'
    description = 'Start the boot app'
}