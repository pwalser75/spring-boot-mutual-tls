plugins {
    id 'java-library'
    id 'org.springframework.boot' version '2.5.4'
    id "com.github.ben-manes.versions" version "0.39.0"
}

description = 'Spring Boot with mutual TLS'
group = 'ch.frostnova'
version = '1.0.0-SNAPSHOT'

ext {
    dateTimeFormat = java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")
    buildDate = java.time.LocalDateTime.now()

    springVersion = '2.5.+'
    checkVersion = '1.0.+'

    junitVersion = '5.7.+'
    assertjVersion = '3.20.+'
    mockitoVersion = '3.12.+'

    jaxbVersion = '2.3.+'

    libs = [
            check         : [
                    "ch.frostnova:check:${checkVersion}"
            ],
            testBase      : [
                    "org.junit.jupiter:junit-jupiter-api:$junitVersion",
                    "org.assertj:assertj-core:$assertjVersion",
                    "org.mockito:mockito-core:$mockitoVersion"
            ],
            testRuntime   : [
                    "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
            ],
            springBoot    : [
                    "org.springframework.boot:spring-boot-starter-web:$springVersion",
                    "org.springframework.boot:spring-boot-starter-security:$springVersion",
                    "org.springframework.boot:spring-boot-starter-actuator:$springVersion"
            ],
            springBootTest: [
                    "org.springframework.boot:spring-boot-starter-test:$springVersion",
                    "org.springframework.boot:spring-boot-starter-jersey:$springVersion",
                    "javax.xml.bind:jaxb-api:$jaxbVersion"
            ]
    ]
}

dependencies {
    implementation libs.check
    implementation libs.springBoot

    testImplementation libs.testBase
    testImplementation libs.springBootTest

    testRuntimeOnly libs.testRuntime
}

defaultTasks 'clean', 'build'

repositories {
    mavenLocal()
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
    withJavadocJar()
    withSourcesJar()
}
test {
    useJUnitPlatform()
}
jar {
    manifest {
        attributes(
                "Name": project.name,
                "Version": project.version,
                "Build-Date": dateTimeFormat.format(buildDate)
        )
    }
}

repositories {
    mavenCentral()
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}

task start(dependsOn: ['assemble', 'bootRun']) {
    group = 'Start/Run'
    description = 'Start the boot app'
}